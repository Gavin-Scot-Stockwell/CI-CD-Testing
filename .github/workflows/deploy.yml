# Name of workflow
name: Deploy

# Trigger workflow on push and pull request to main branch
on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main

# Jobs to carry out
jobs:
  deployToRender:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:4.4.6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      # Install dependencies
      - name: Install dependencies
        run: npm install --legacy-peer-deps --force

      # Install pm2
      - name: Install pm2
        run: npm install -g pm2

      # Build the server
      - name: Build the server
        run: cd server && npm run build

      # Wait for MongoDB to be healthy
      - name: Wait for MongoDB
        run: |
          CONTAINER_ID=$(docker ps -q --filter ancestor=mongo:4.4.6)
          echo "MongoDB container ID: $CONTAINER_ID"
          until [ "$(docker inspect -f {{.State.Health.Status}} $CONTAINER_ID)" == "healthy" ]; do
            echo "Waiting for MongoDB to be healthy..."
            sleep 5
          done

      # Check Docker logs
      - name: Check Docker logs
        run: |
          CONTAINER_ID=$(docker ps -q --filter ancestor=mongo:4.4.6)
          docker logs $CONTAINER_ID

      # Ensure correct working directory
      - name: Ensure correct working directory
        run: |
          pwd
          ls -l

      # Start the server using pm2
      - name: Start the server
        env:
          MONGODB_URI: mongodb://127.0.0.1:27017/techquiz
        run: |
          cd server
          pm2 start npm --name "techquiz-server" -- run start
          pm2 save

      # Capture pm2 Logs
      - name: Capture pm2 Logs
        run: |
          pm2 logs techquiz-server --lines 100

      # Verify the server is running
      - name: Verify Server is Running
        run: |
          sleep 5
          if ! pm2 list | grep -q "techquiz-server"; then
            echo "Error: Server process not running!"
            exit 1
          fi

      # Deploy to Render
      - name: Deploy
        if: github.ref == 'refs/heads/main'
        env:
          DEPLOY_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$DEPLOY_URL"

      # Check Running Processes
      - name: Check Running Processes
        run: |
          pm2 list

      # Check Server Logs
      - name: Check Server Logs
        run: |
          pm2 logs techquiz-server --lines 100